company-workspace/
│
├── apps/                              # Application Layer
│   ├── api/                          # NestJS Backend (Port: 3000)
│   │   ├── src/
│   │   │   ├── app/
│   │   │   │   ├── auth/            # Auth routes, services, strategies
│   │   │   │   ├── tasks/           # Task CRUD endpoints
│   │   │   │   ├── organizations/   # Organization management
│   │   │   │   └── app.module.ts    # Main app module
│   │   │   └── main.ts              # Bootstrap
│   │   ├── webpack.config.js
│   │   ├── tsconfig.app.json
│   │   ├── tsconfig.spec.json
│   │   ├── jest.config.ts
│   │   └── project.json
│   │
│   ├── dashboard/                    # Angular Frontend (Port: 4200)
│   │   ├── src/
│   │   │   ├── app/
│   │   │   │   ├── auth/            # Login/signup components
│   │   │   │   ├── dashboard/       # Main dashboard with drag-drop
│   │   │   │   ├── services/        # HTTP services
│   │   │   │   └── app.routes.ts    # Angular routes
│   │   │   └── main.ts              # Bootstrap
│   │   ├── tsconfig.app.json
│   │   ├── tsconfig.spec.json
│   │   ├── jest.config.ts
│   │   └── project.json
│   │
│   ├── api-e2e/                      # Backend E2E Tests
│   │   └── src/backend/
│   │       └── tasks.integration.spec.ts
│   │
│   └── dashboard-e2e/                # Frontend E2E Tests
│       └── src/
│           └── dashboard.e2e.spec.ts
│
├── libs/                              # Shared Library Layer
│   ├── data/                         # @company-workspace/data
│   │   ├── src/
│   │   │   ├── lib/
│   │   │   │   ├── entities/        # TypeORM Entities (Shared Models)
│   │   │   │   │   ├── user.entity.ts          # User + UserRole enum
│   │   │   │   │   ├── task.entity.ts          # Task + TaskStatus/Priority enums
│   │   │   │   │   ├── organization.entity.ts  # Organization
│   │   │   │   │   └── audit-log.entity.ts     # Audit logging
│   │   │   │   ├── enums/
│   │   │   │   │   └── permission.enum.ts      # RBAC Permissions
│   │   │   │   └── dtos/            # Data Transfer Objects
│   │   │   │       ├── create-task.dto.ts
│   │   │   │       ├── update-task.dto.ts
│   │   │   │       ├── login.dto.ts
│   │   │   │       ├── create-organization.dto.ts
│   │   │   │       └── update-organization.dto.ts
│   │   │   └── index.ts             # Public API
│   │   ├── tsconfig.lib.json
│   │   ├── jest.config.ts
│   │   └── project.json
│   │
│   └── auth/                         # @company-workspace/auth
│       ├── src/
│       │   ├── lib/
│       │   │   ├── decorators/      # NestJS Custom Decorators
│       │   │   │   ├── current-user.decorator.ts   # @CurrentUser()
│       │   │   │   ├── roles.decorator.ts          # @Roles()
│       │   │   │   └── permissions.decorator.ts    # @RequirePermissions()
│       │   │   ├── guards/          # NestJS Guards
│       │   │   │   ├── jwt-auth.guard.ts           # JWT validation
│       │   │   │   ├── roles.guard.ts              # Role-based access
│       │   │   │   ├── ownership.guard.ts          # Resource ownership
│       │   │   │   └── permissions.guard.ts        # Permission-based access
│       │   │   └── services/
│       │   │       └── rbac.service.ts             # RBAC business logic
│       │   └── index.ts             # Public API
│       ├── tsconfig.lib.json
│       ├── jest.config.ts
│       └── project.json
│
├── dist/                             # Build Output
│   ├── apps/
│   │   ├── backend/                 # Compiled NestJS app
│   │   └── dashboard/               # Compiled Angular app
│   └── libs/
│       ├── data/                    # Compiled library
│       └── auth/                    # Compiled library
│
├── DATABASE_SETUP.md                # Database setup instructions
├── LIBRARY_STRUCTURE.md             # This documentation
├── package.json                     # Workspace dependencies
├── tsconfig.base.json               # Base TypeScript config (with path mappings)
├── nx.json                          # Nx workspace config
└── jest.config.ts                   # Jest root config

KEY FEATURES:
═══════════════

📦 Shared Libraries:
   • @company-workspace/data  → Entities, DTOs, Enums
   • @company-workspace/auth  → Decorators, Guards, RBAC

🔄 Benefits:
   • Single source of truth for data models
   • Type safety across frontend & backend
   • Reusable RBAC logic
   • Easy to add new apps
   • Consistent validation rules

📝 Import Examples:
   Backend:  import { User, Permission } from '@company-workspace/data';
             import { RbacService } from '@company-workspace/auth';
   
   Frontend: import { Task, TaskStatus } from '@company-workspace/data';

🧪 Testing:
   • apps/api/src/**/*.spec.ts         → 36 unit tests
   • apps/dashboard/src/**/*.spec.ts   → 3 unit tests
   • apps/api-e2e/src/**/*.spec.ts     → Integration tests
   • apps/dashboard-e2e/src/**/*.spec.ts → E2E tests
